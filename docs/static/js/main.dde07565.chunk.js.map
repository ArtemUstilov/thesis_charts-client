{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SEL_TYPES","val","label","USERS","user","password","table","DYNAMIC_L_TYPES","value","RUN_IDS","NS","VARIANTS","LS","API_URL","MAP_VARIANT_USER","1","2","App","useState","data","setData","loading","setLoading","n","setN","l","setL","selType","setSelType","runId","setRunId","offset","setOffset","size","setSize","type","setType","variant","setVariant","fetchData","off","a","fetch","undefined","response","json","console","log","makeHandler","setter","e","persist","target","className","htmlFor","name","id","defaultValue","onChange","disabled","map","opt","key","placeholder","onClick","back","next","f","labels","_","i","datasets","borderColor","borderWidth","pairwise_hamming_distribution_p","ideal_hamming_distribution_p","wild_type_hamming_distribution_p","iteration","legend","display","width","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dde07565.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Bar} from \"react-chartjs-2\";\n\nconst SEL_TYPES = [\n  {val: 'rws', label: 'Roulette'},\n  {val: 'tournament_2', label: 'Tournament 2'},\n  {val: 'tournament_4', label: 'TOurnament 4'},\n];\n\nconst USERS = [\n  {user: 'postgres', password: '123123Aa', table: 'task_2_variant_2'},\n  {user: 'misha', password: 'thesis_misha', table: 'task2_full_gcloud_v1'},\n];\n\nconst DYNAMIC_L_TYPES = [\n  {value: 'type_1', label: 'Type 1 (first 10 steps **2)'},\n  {value: 'type_2', label: 'Type 2 (first 80 steps *1.1)'},\n  {value: 'type_3', label: 'Type 3 (*1.005)'},\n  {value: 'type_4', label: 'Type 4 (+1 by 2000)'},\n];\n\nconst RUN_IDS = [0, 1, 2, 3, 4];\n\nconst NS = [10, 20, 80, 100, 200, 800, 1000];\nconst VARIANTS = [1, 2];\nconst LS = [10, 20, 80, 100, 200, 800, 1000];\n\nconst API_URL = 'https://thesis-charts-server.herokuapp.com/charts';\n// const API_URL = 'http://localhost:3000/charts';\n\nconst MAP_VARIANT_USER = {\n  1: USERS[1],\n  2: USERS[0],\n};\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const [n, setN] = useState(null);\n  const [l, setL] = useState(10);\n  const [selType, setSelType] = useState(SEL_TYPES[0].val);\n  const [runId, setRunId] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(100);\n  const [type, setType] = useState(null);\n  const [variant, setVariant] = useState(1);\n\n\n  async function fetchData(off) {\n    try {\n      const { user, password, table } = MAP_VARIANT_USER[variant];\n      setLoading(true);\n      const response = await fetch(\n        `${API_URL}?${variant == 1 ? `n=${n}` : `type=${type}`}&l=${l}&user=${user}&password=${password}&table=${table}&run_id=${runId}&sel_type=${selType}&offset=${off === undefined ? offset : off}&limit=${size}\n          `);\n      const json = await response.json();\n      setData(json);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  }\n\n  const makeHandler = setter => e => e.persist() || setter(e.target.value);\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Tool to explore generated by genetic algorithm population models\n      </h1>\n      <div className=\"form\">\n        <div className=\"cont\">\n          {/*<select name=\"db_user\" id=\"db_user_select\" defaultValue=\"\" value={user} onChange={e => {*/}\n          {/*  e.persist();*/}\n          {/*  const us = e.target.value;*/}\n          {/*  setUser(us);*/}\n          {/*  setPassword(USERS.find(({user}) => user === us).password);*/}\n          {/*}}>*/}\n          {/*  <option value=\"\" disabled>DB user</option>*/}\n          {/*  {USERS.map(user => (*/}\n          {/*    <option value={user.user} key={user.user}>{user.user}</option>*/}\n          {/*  ))}*/}\n          {/*</select>*/}\n\n          {/*<input type=\"text\" name=\"table\" placeholder=\"table\" value={table} onChange={makeHandler(setTable)}/>*/}\n\n        </div>\n        <div className=\"cont2\">\n          <div>\n            <label htmlFor=\"rws\">\n              Selection type\n            </label>\n            <select name=\"rws\" id=\"rws_select\" defaultValue=\"\" value={selType} onChange={makeHandler(setSelType)}>\n              <option value=\"\" disabled>Selection type</option>\n              {SEL_TYPES.map(opt => (\n                <option value={opt.val} key={opt.val}>{opt.label}</option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label htmlFor=\"ls\">\n              Indv length\n            </label>\n            <select name=\"ls\" id=\"ls_select\" defaultValue=\"\" value={l} onChange={makeHandler(setL)}>\n              <option value=\"\" disabled>indv length (L)</option>\n              {LS.map(n => (\n                <option value={n} key={n}>{n}</option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label htmlFor=\"variant\">\n              Variant (static / dynamic N)\n            </label>\n            <select name=\"variant\" id=\"variant_select\" defaultValue=\"\" value={variant} onChange={makeHandler(setVariant)}>\n              <option value=\"\" disabled>Variant (static\\dynamic L)</option>\n              {VARIANTS.map(n => (\n                <option value={n} key={n}>{n}</option>\n              ))}\n            </select>\n          </div>\n          {variant == 1 && (\n            <div>\n              <label htmlFor=\"ns\">\n                N (population size)\n              </label>\n              <select name=\"ns\" id=\"ns_select\" defaultValue=\"\" value={n} onChange={makeHandler(setN)}>\n                <option value=\"\" disabled>pop size (N)</option>\n                {NS.map(n => (\n                  <option value={n} key={n}>{n}</option>\n                ))}\n              </select>\n            </div>\n          )}\n          {variant == 2 && (\n            <div>\n              <label htmlFor=\"dynamicL\">\n                Type of L incrementing\n              </label>\n              <select name=\"dynamicL\" id=\"dynamicL\" defaultValue=\"\" value={type} onChange={makeHandler(setType)}>\n                <option value=\"\" disabled>Type of dynamic N</option>\n                {DYNAMIC_L_TYPES.map(n => (\n                  <option value={n.value} key={n.value}>{n.label}</option>\n                ))}\n              </select>\n            </div>\n          )}\n          <div>\n            <label htmlFor=\"run_id\">Run id</label>\n            <select name=\"run_id\" id=\"run_id_select\" value={runId} defaultValue={0} onChange={makeHandler(setRunId)}>\n              {RUN_IDS.map(id => (\n                <option value={id} key={id}>{id}</option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label htmlFor=\"offset\">\n              Offset\n            </label>\n            <input type=\"text\" name=\"offset\" placeholder=\"offset\" value={offset} onChange={makeHandler(setOffset)}/>\n          </div>\n          <div>\n            <label htmlFor=\"size\">\n              Size\n            </label>\n            <input type=\"text\" name=\"size\" placeholder=\"size\" value={size} onChange={makeHandler(setSize)}/>\n          </div>\n          <button type=\"button\" onClick={() => fetchData()}>\n            Process\n          </button>\n        </div>\n      </div>\n      <div className=\"arrows\">\n        <button\n          onClick={() => {\n            const back = +offset - +size;\n            setOffset(back < 0 ? 0 : back);\n            fetchData(back);\n          }}\n        >\n          PREV\n        </button>\n        <button\n          onClick={() => {\n            const next = +offset + +size\n            setOffset(next);\n            fetchData(next);\n          }}\n        >\n          NEXT\n        </button>\n      </div>\n      <div>\n        <div className=\"datatype\">\n          <span className=\"green\"/>\n          <span>-----wild_type_hamming_distribution</span>\n        </div>\n        <div className=\"datatype\">\n          <span className=\"blue\"/>\n          <span>-----pairwise_hamming_distribution</span>\n        </div>\n        <div className=\"datatype\">\n          <span className=\"red\"/>\n          <span>-----ideal_hamming_distribution</span>\n        </div>\n      </div>\n      <div className=\"container\">\n        {loading && (\n          <p>Loading...</p>\n        )}\n        {!loading && data.map((f) => {\n          const data = {\n            labels: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1].map((_, i) => i),\n            datasets: [\n              {\n                label: 'pairwise_hamming_distribution_p',\n                borderColor: '#00F',\n                borderWidth: 1,\n                data: f.pairwise_hamming_distribution_p\n              },\n              {\n                label: 'ideal_hamming_distribution_p',\n                borderColor: '#F00',\n                borderWidth: 1,\n                data: f.ideal_hamming_distribution_p\n              },\n              {\n                label: 'wild_type_hamming_distribution_p',\n                borderColor: '#0F0',\n                borderWidth: 1,\n                data: f.wild_type_hamming_distribution_p\n              },\n            ],\n          };\n          return (\n            <div key={f.id} className=\"chart\">\n              <span className=\"iteration\">\n                {f.iteration}\n              </span>\n              {variant === '2' && (\n                <span className=\"pop_size\">\n                  {f.n}\n                </span>\n              )}\n              <Bar\n                data={{\n                  ...data,\n                  datasets: [data.datasets[0]],\n                }}\n                legend={{\n                  display: false,\n                }}\n                width={100}\n                height={45}\n              />\n              <Bar\n                data={{\n                  ...data,\n                  datasets: [data.datasets[1]],\n                }}\n                legend={{\n                  display: false,\n                }}\n                width={100}\n                height={45}\n              />\n              <Bar\n                data={{\n                  ...data,\n                  datasets: [data.datasets[2]],\n                }}\n                legend={{\n                  display: false,\n                }}\n                width={100}\n                height={45}\n              />\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}