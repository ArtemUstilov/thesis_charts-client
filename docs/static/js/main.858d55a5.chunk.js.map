{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SEL_TYPES","val","label","USERS","user","password","table","tableInfo","DYNAMIC_L_TYPES","value","VARIANTS","API_URL","MAP_VARIANT_USER","1","2","format","toString","replace","App","useState","data","setData","loading","setLoading","n","setN","l","setL","selType","setSelType","runId","setRunId","offset","setOffset","init","setInit","size","setSize","type","setType","variant","setVariant","variants","setVariants","line","setLine","chartLen","setChartLen","details","setDetails","fetchData","off","a","fetch","undefined","response","json","max","length","reduce","ac","el","m","i","ideal_hamming_distribution_p","Math","console","log","useEffect","info","makeHandler","setter","e","persist","target","className","htmlFor","name","id","defaultValue","onChange","disabled","map","key","colSpan","t","ind","onClick","size_pop_type","sel_type","run_id","data-selected","find","g","style","textAlign","placeholder","Button","fetchDetails","labels","Array","fill","_","datasets","borderColor","borderWidth","mode_ideal","mode_wild","mode_pair","legend","display","width","height","back","next","f","pairwise_hamming_distribution_p","wild_type_hamming_distribution_p","iteration","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.858d55a5.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Bar} from \"react-chartjs-2\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\n\nconst SEL_TYPES = [\n  {val: 'rws', label: 'Roulette'},\n  {val: 'tournament_2', label: 'Tournament 2'},\n  {val: 'tournament_4', label: 'TOurnament 4'},\n];\n\nconst USERS = [\n  {user: 'postgres', password: '123123Aa', table: 'task_2_variant_2', tableInfo: 'task_2_variant_2'},\n  {user: 'misha', password: 'thesis_misha', table: 'task2_full_gcloud_v1', tableInfo: 'task2_v2_tmp'},\n];\n\nconst DYNAMIC_L_TYPES = [\n  {value: 'type_1', label: 'Type 1 (first 10 steps **2)'},\n  {value: 'type_2', label: 'Type 2 (first 80 steps *1.1)'},\n  {value: 'type_3', label: 'Type 3 (*1.005)'},\n  {value: 'type_4', label: 'Type 4 (+1 by 2000)'},\n  {value: 'type_3_init_200', label: 'Type 3 (*1.005), init size 200'},\n  {value: 'type_3_i_200_px10', label: 'Type 3 (*1.005), init size 200 px*10'},\n  {value: 'type_3_i_200_px0_1', label: 'Type 3 (*1.005), init size 200 px/10'},\n];\n\n\nconst VARIANTS = [{value: 1, label: 'static population size'}, {value: 2, label: 'dynamic population size'}];\n\nconst API_URL = 'https://thesis-charts-server.herokuapp.com/charts';\n// const API_URL = 'http://localhost:3000/charts';\n\nconst MAP_VARIANT_USER = {\n  1: USERS[1],\n  2: USERS[0],\n};\n\nconst format = val => (val || '').toString().replace(/\\s/g, '');\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const [n, setN] = useState(null);\n  const [l, setL] = useState(10);\n  const [selType, setSelType] = useState(SEL_TYPES[0].val);\n  const [runId, setRunId] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const [init, setInit] = useState(\"all_0\");\n  const [size, setSize] = useState(100);\n  const [type, setType] = useState(null);\n  const [variant, setVariant] = useState(2);\n  const [variants, setVariants] = useState([]);\n  const [line, setLine] = useState(null);\n  const [chartLen, setChartLen] = useState(10);\n\n  const [details, setDetails] = useState(null);\n\n  async function fetchData(off) {\n    try {\n      const {user, password, table} = MAP_VARIANT_USER[variant];\n      setLoading(true);\n      const response = await fetch(\n        `${API_URL}?${variant == 1 ? `n=${n}` : `type=${type}`}&l=${l}&user=${user}&init=${init}&password=${password}&table=${table}&run_id=${runId}&sel_type=${selType}&offset=${off === undefined ? offset : off}&limit=${size}\n          `);\n      const json = await response.json();\n      const max = json.length && json.reduce((ac, el) => {\n        let m;\n        for (let i = el.ideal_hamming_distribution_p.length - 1; i >= 0; i--) {\n          const we = el.ideal_hamming_distribution_p[i];\n          if (we === 0) {\n            continue;\n          }\n\n          m = i + 3;\n        }\n\n        return m > ac ? m : ac;\n      }, 0);\n\n      setChartLen(Math.max(max, 10));\n\n      setData(json);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  }\n\n  async function fetchDetails() {\n    try {\n      const {user, password, table} = MAP_VARIANT_USER[variant];\n      setLoading(true);\n      const response = await fetch(\n        `${API_URL}/details?${variant == 1 ? `n=${n}` : `type=${type}`}&l=${l}&user=${user}&init=${init}&password=${password}&table=${table}&run_id=${runId}&sel_type=${selType}\n          `);\n      const json = await response.json();\n\n      setDetails(json);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  }\n\n  async function info() {\n    const {user, password, tableInfo} = MAP_VARIANT_USER[variant];\n    const response = await fetch(`${API_URL}/available?user=${user}&password=${password}&table=${tableInfo}&variant=${variant}`);\n    const json = await response.json();\n\n    setVariants(json);\n  }\n\n  useEffect(() => {\n    info()\n  }, [variant]);\n  const makeHandler = setter => e => e.persist() || setter(e.target.value);\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Tool to explore generated by genetic algorithm population models\n      </h1>\n      <div className=\"header_select form-group\">\n        <label htmlFor=\"variant\">\n          Variant\n        </label>\n        <select name=\"variant\" id=\"variant_select\" defaultValue=\"\" value={variant} onChange={value => {\n          makeHandler(setVariant)(value);\n          setData([]);\n          setVariants([]);\n        }}>\n          <option value=\"\" disabled>Variant (static\\dynamic L)</option>\n          {VARIANTS.map(n => (\n            <option value={n.value} key={n.value}>{n.label}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"container_form\">\n        <div className=\"table\">\n          <table>\n            <thead>\n            <tr>\n              <th colSpan={5}>\n                Available data (Click on any row, type offset and size and press Show to see this model)\n              </th>\n            </tr>\n            <tr>\n              <th>L</th>\n              <th>N|Type</th>\n              <th>RUN ID</th>\n              <th>SEL TYPE</th>\n              <th>INIT</th>\n            </tr>\n            </thead>\n            <tbody>\n            {variants.map((t, ind) => (\n              <tr onClick={() => {\n                setL(format(t.l));\n                setN(format(t.n));\n                setType(format(t.size_pop_type));\n                setSelType(format(t.sel_type));\n                setRunId(t.run_id);\n                setInit(format(t.init));\n                setLine(ind);\n              }}\n                  data-selected={ind === line}\n              >\n                <td>{t.l}</td>\n                <td>{t.n || (DYNAMIC_L_TYPES.find(g => g.value === format(t.size_pop_type)) || {}).label}</td>\n                <td>{t.run_id}</td>\n                <td>{t.sel_type}</td>\n                <td>{t.init}</td>\n              </tr>\n            ))}\n            {!variants.length && (\n              <tr>\n                <td colSpan={5} style={{textAlign: 'center'}}>\n                  Loading...\n                </td>\n              </tr>\n            )}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"form\">\n          <div>\n            <label htmlFor=\"offset\">\n              Offset\n            </label>\n            <input type=\"text\" name=\"offset\" placeholder=\"offset\" value={offset} onChange={makeHandler(setOffset)}/>\n          </div>\n          <div>\n            <label htmlFor=\"size\">\n              Size\n            </label>\n            <input type=\"text\" name=\"size\" placeholder=\"size\" value={size} onChange={makeHandler(setSize)}/>\n          </div>\n          <Button type=\"button\" className=\"process\" onClick={() => fetchData()} disabled={line === null}>\n            Show\n          </Button>\n        </div>\n        <Button\n          type=\"button\"\n          className=\"process\"\n          onClick={() => {\n            if(details){\n              setDetails(null);\n            }else{\n              fetchDetails();\n            }\n          }}\n          disabled={line === null}>\n          Show Details\n        </Button>\n      </div>\n\n      {details && (\n        <div>\n          <Bar\n            data={{\n              labels: Array(20000).fill(1).map((_, i) => 1),\n              datasets: [\n                {\n                  label: 'mode_ideal',\n                  borderColor: '#00F',\n                  borderWidth: 1,\n                  data: details.map(t => t.mode_ideal[0])\n                },\n                {\n                  label: 'mode_wild',\n                  borderColor: '#F00',\n                  borderWidth: 1,\n                  data: details.map(t => t.mode_wild[0])\n                },\n                {\n                  label: 'mode_pair',\n                  borderColor: '#0F0',\n                  borderWidth: 1,\n                  data: details.map(t => t.mode_pair[0])\n                },\n              ]\n            }}\n            legend={{\n              display: false,\n            }}\n            width={100}\n            height={45}\n          />\n        </div>\n      )}\n      {data && data.length ? (\n        <>\n          <div className=\"arrows\">\n            <Button\n              onClick={() => {\n                const back = +offset - +size;\n                setOffset(back < 0 ? 0 : back);\n                fetchData(back);\n              }}\n            >\n              {'<<<'}\n            </Button>\n            <Button\n              onClick={() => {\n                const next = +offset + +size\n                setOffset(next);\n                fetchData(next);\n              }}\n            >\n              {'>>> '}\n            </Button>\n          </div>\n          <div className=\"datatypes\">\n            <div className=\"datatype\">\n              <span className=\"green\"/>\n              <span>-----wild_type_hamming_distribution</span>\n            </div>\n            <div className=\"datatype\">\n              <span className=\"blue\"/>\n              <span>-----pairwise_hamming_distribution</span>\n            </div>\n            <div className=\"datatype\">\n              <span className=\"red\"/>\n              <span>-----ideal_hamming_distribution</span>\n            </div>\n          </div>\n        </>\n      ) : null\n      }\n\n      <div className=\"container\">\n        {loading && (\n          <p style={{textAlign: 'center'}}>Loading...</p>\n        )}\n        {!loading && data.map((f) => {\n          const data = {\n            labels: Array(chartLen).fill(1).map((_, i) => i),\n            datasets: [\n              {\n                label: 'pairwise_hamming_distribution_p',\n                borderColor: '#00F',\n                borderWidth: 1,\n                data: f.pairwise_hamming_distribution_p\n              },\n              {\n                label: 'ideal_hamming_distribution_p',\n                borderColor: '#F00',\n                borderWidth: 1,\n                data: f.ideal_hamming_distribution_p\n              },\n              {\n                label: 'wild_type_hamming_distribution_p',\n                borderColor: '#0F0',\n                borderWidth: 1,\n                data: f.wild_type_hamming_distribution_p\n              },\n            ],\n          };\n          return (\n            <div key={f.id} className=\"chart\">\n              <span className=\"iteration\">\n                {f.iteration}\n              </span>\n              {variant == '2' && (\n                <span className=\"pop_size\">\n                  {f.n}\n                </span>\n              )}\n              <Bar\n                data={{\n                  ...data,\n                  datasets: [data.datasets[0]],\n                }}\n                legend={{\n                  display: false,\n                }}\n                width={100}\n                height={45}\n              />\n              <Bar\n                data={{\n                  ...data,\n                  datasets: [data.datasets[1]],\n                }}\n                legend={{\n                  display: false,\n                }}\n                width={100}\n                height={45}\n              />\n              <Bar\n                data={{\n                  ...data,\n                  datasets: [data.datasets[2]],\n                }}\n                legend={{\n                  display: false,\n                }}\n                width={100}\n                height={45}\n              />\n            </div>\n          )\n        })}\n      </div>\n      {\n        data && data.length ? (\n          <div className=\"arrows\">\n            <Button\n              onClick={() => {\n                const back = +offset - +size;\n                setOffset(back < 0 ? 0 : back);\n                fetchData(back);\n              }}\n            >\n              {'<<<'}\n            </Button>\n            <Button\n              onClick={() => {\n                const next = +offset + +size\n                setOffset(next);\n                fetchData(next);\n              }}\n            >\n              {'>>> '}\n            </Button>\n          </div>\n        ) : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}