import React, {useEffect, useState} from 'react';
import './App.css';
import {Bar} from "react-chartjs-2";

const SEL_TYPES = [
  { val: 'rws', label: 'Roulette'},
  { val: 'tournament_2', label: 'Tournament 2'},
  { val: 'tournament_4', label: 'TOurnament 4'},
];

const USERS = [
  { user: 'postgres', password: '123123Aa'},
  { user: 'misha', password: 'thesis_misha'},
];

const RUN_IDS = [0,1,2,3,4];

const NS = [10,20,80,100,200,800,1000];
const LS = [10,20,80,100,200,800,1000];

const API_URL = 'https://thesis-charts-server.herokuapp.com/charts';

function App() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState(null);
  const [password, setPassword] = useState(null);
  const [n, setN] = useState(null);
  const [l, setL] = useState(null);
  const [selType, setSelType] = useState(null);
  const [runId, setRunId] = useState(null);
  const [offset, setOffset] = useState(null);
  const [size, setSize] = useState(null);
  const [table, setTable] = useState('task2_full_gcloud_v1');

  async function fetchData() {
    try {
      setLoading(true);
      const response = await fetch(
        `${API_URL}?l=${l}&n=${n}&user=${user}&password=${password}&table=${table}&run_id=${runId}&sel_type=${selType}&offset=${offset}&limit=${size}
          `);
      const json = await response.json();
      setData(json);
      setLoading(false);
    }catch (e) {
      console.log(e);
      setLoading(false);
    }
  }

  const makeHandler = setter => e => e.persist() || setter(e.target.value);

  return (
    <div className="App">
      <h1>
        Tool to explore generated by genetic algorithm population models
      </h1>
      <div className="form">
       <div className="cont">
         <select name="db_user" id="db_user_select" defaultValue="" value={user} onChange={e => {
           e.persist();
           const us = e.target.value;
           setUser(us);
           setPassword(USERS.find(({user}) => user === us).password);
         }}>
           <option value="" disabled>DB user</option>
           {USERS.map(user => (
             <option value={user.user} key={user.user}>{user.user}</option>
           ))}
         </select>

         <input type="text" name="table" placeholder="table" value={table} onChange={makeHandler(setTable)}/>

       </div>
     <div className="cont2">
       <select name="rws" id="rws_select" defaultValue="" value={selType} onChange={makeHandler(setSelType)}>
         <option value="" disabled>Selection type</option>
         {SEL_TYPES.map(opt => (
           <option value={opt.val} key={opt.val}>{opt.label}</option>
         ))}
       </select>
       <select name="ls" id="ls_select" defaultValue="" value={l} onChange={makeHandler(setL)}>
         <option value="" disabled>pop size (L)</option>
         {LS.map(n => (
           <option value={n} key={n}>{n}</option>
         ))}
       </select>
       <select name="ns" id="ns_select" defaultValue="" value={n} onChange={makeHandler(setN)}>
         <option value="" disabled>indv length (N)</option>
         {NS.map(n => (
           <option value={n} key={n}>{n}</option>
         ))}
       </select>
       <select name="run_id" id="run_id_select" value={runId} onChange={makeHandler(setRunId)}>
         {RUN_IDS.map(id => (
           <option value={id} key={id}>{id}</option>
         ))}
       </select>
       <input type="text" name="offset" placeholder="offset" value={offset} onChange={makeHandler(setOffset)}/>
       <input type="text" name="size" placeholder="size" value={size} onChange={makeHandler(setSize)}/>
       <button type="button" onClick={fetchData}>
         Process
       </button>
     </div>
      </div>
      <div className="container">
        {loading && (
          <p>Loading...</p>
        )}
        {!loading && data.map((f) => {
          const data = {
            labels: [1,1,1,1,1,1,1,1,1,1].map((_,i) => i),
            datasets: [
              {
                label: 'pairwise_hamming_distribution_p',
                borderColor: '#00F',
                borderWidth: 1,
                data: f.pairwise_hamming_distribution_p
              },
              {
                label: 'ideal_hamming_distribution_p',
                borderColor: '#F00',
                borderWidth: 1,
                data: f.ideal_hamming_distribution_p
              },
              {
                label: 'wild_type_hamming_distribution_p',
                borderColor: '#0F0',
                borderWidth: 1,
                data: f.wild_type_hamming_distribution_p
              },
            ],
          };
          return(
            <div key={f.id} className="chart">
              <span>
                {f.iteration}
              </span>
              <Bar
                data={data}
                legend={{
                  display: false,
                }}
                width={100}
                height={100}
              />
            </div>
          )
        })}
      </div>
    </div>
  );
}

export default App;
