{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SEL_TYPES","val","label","USERS","user","password","RUN_IDS","NS","LS","API_URL","App","useState","data","setData","loading","setLoading","setUser","setPassword","n","setN","l","setL","selType","setSelType","runId","setRunId","offset","setOffset","size","setSize","table","setTable","a","fetch","response","json","console","log","makeHandler","setter","e","persist","target","value","className","name","id","defaultValue","onChange","us","find","disabled","map","key","type","placeholder","opt","onClick","f","labels","_","i","datasets","borderColor","borderWidth","pairwise_hamming_distribution_p","ideal_hamming_distribution_p","wild_type_hamming_distribution_p","iteration","legend","display","width","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aea0e15a.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Bar} from \"react-chartjs-2\";\n\nconst SEL_TYPES = [\n  { val: 'rws', label: 'Roulette'},\n  { val: 'tournament_2', label: 'Tournament 2'},\n  { val: 'tournament_4', label: 'TOurnament 4'},\n];\n\nconst USERS = [\n  { user: 'postgres', password: '123123Aa'},\n  { user: 'misha', password: 'thesis_misha'},\n];\n\nconst RUN_IDS = [0,1,2,3,4];\n\nconst NS = [10,20,80,100,200,800,1000];\nconst LS = [10,20,80,100,200,800,1000];\n\nconst API_URL = 'https://thesis-charts-server.herokuapp.com/charts';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState(null);\n  const [password, setPassword] = useState(null);\n  const [n, setN] = useState(null);\n  const [l, setL] = useState(null);\n  const [selType, setSelType] = useState(null);\n  const [runId, setRunId] = useState(null);\n  const [offset, setOffset] = useState(null);\n  const [size, setSize] = useState(null);\n  const [table, setTable] = useState('task2_full_gcloud_v1');\n\n  async function fetchData() {\n    try {\n      setLoading(true);\n      const response = await fetch(\n        `${API_URL}?l=${l}&n=${n}&user=${user}&password=${password}&table=${table}&run_id=${runId}&sel_type=${selType}&offset=${offset}&limit=${size}\n          `);\n      const json = await response.json();\n      setData(json);\n      setLoading(false);\n    }catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  }\n\n  const makeHandler = setter => e => e.persist() || setter(e.target.value);\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Tool to explore generated by genetic algorithm population models\n      </h1>\n      <div className=\"form\">\n       <div className=\"cont\">\n         <select name=\"db_user\" id=\"db_user_select\" defaultValue=\"\" value={user} onChange={e => {\n           e.persist();\n           const us = e.target.value;\n           setUser(us);\n           setPassword(USERS.find(({user}) => user === us).password);\n         }}>\n           <option value=\"\" disabled>DB user</option>\n           {USERS.map(user => (\n             <option value={user.user} key={user.user}>{user.user}</option>\n           ))}\n         </select>\n\n         <input type=\"text\" name=\"table\" placeholder=\"table\" value={table} onChange={makeHandler(setTable)}/>\n\n       </div>\n     <div className=\"cont2\">\n       <select name=\"rws\" id=\"rws_select\" defaultValue=\"\" value={selType} onChange={makeHandler(setSelType)}>\n         <option value=\"\" disabled>Selection type</option>\n         {SEL_TYPES.map(opt => (\n           <option value={opt.val} key={opt.val}>{opt.label}</option>\n         ))}\n       </select>\n       <select name=\"ls\" id=\"ls_select\" defaultValue=\"\" value={l} onChange={makeHandler(setL)}>\n         <option value=\"\" disabled>pop size (L)</option>\n         {LS.map(n => (\n           <option value={n} key={n}>{n}</option>\n         ))}\n       </select>\n       <select name=\"ns\" id=\"ns_select\" defaultValue=\"\" value={n} onChange={makeHandler(setN)}>\n         <option value=\"\" disabled>indv length (N)</option>\n         {NS.map(n => (\n           <option value={n} key={n}>{n}</option>\n         ))}\n       </select>\n       <select name=\"run_id\" id=\"run_id_select\" value={runId} onChange={makeHandler(setRunId)}>\n         {RUN_IDS.map(id => (\n           <option value={id} key={id}>{id}</option>\n         ))}\n       </select>\n       <input type=\"text\" name=\"offset\" placeholder=\"offset\" value={offset} onChange={makeHandler(setOffset)}/>\n       <input type=\"text\" name=\"size\" placeholder=\"size\" value={size} onChange={makeHandler(setSize)}/>\n       <button type=\"button\" onClick={fetchData}>\n         Process\n       </button>\n     </div>\n      </div>\n      <div className=\"container\">\n        {loading && (\n          <p>Loading...</p>\n        )}\n        {!loading && data.map((f) => {\n          const data = {\n            labels: [1,1,1,1,1,1,1,1,1,1].map((_,i) => i),\n            datasets: [\n              {\n                label: 'pairwise_hamming_distribution_p',\n                borderColor: '#00F',\n                borderWidth: 1,\n                data: f.pairwise_hamming_distribution_p\n              },\n              {\n                label: 'ideal_hamming_distribution_p',\n                borderColor: '#F00',\n                borderWidth: 1,\n                data: f.ideal_hamming_distribution_p\n              },\n              {\n                label: 'wild_type_hamming_distribution_p',\n                borderColor: '#0F0',\n                borderWidth: 1,\n                data: f.wild_type_hamming_distribution_p\n              },\n            ],\n          };\n          return(\n            <div key={f.id} className=\"chart\">\n              <span>\n                {f.iteration}\n              </span>\n              <Bar\n                data={data}\n                legend={{\n                  display: false,\n                }}\n                width={100}\n                height={100}\n              />\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}